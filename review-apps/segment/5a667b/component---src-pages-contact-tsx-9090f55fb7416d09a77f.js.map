{"version":3,"sources":["webpack:///./src/pages/contact.tsx"],"names":["Contact","useState","validForm","setValidForm","role","setRole","firstName","setFirstName","lastName","setLastName","email","setEmail","message","setMessage","submitted","setSubmitted","emailRegex","isValidEmail","val","test","useEffect","length","path","title","description","className","style","minHeight","onSubmit","event","preventDefault","formData","first_name","last_name","undefined","window","heap","track","analytics","formSubmitted","form_name","identify","scrollTo","classNames","defaultValue","id","name","onChange","target","value","label","map","r","key","hidden","htmlFor","type","autoComplete","required","requiredText","e","currentTarget","validate","invalidText","disabled","size"],"mappings":"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","file":"component---src-pages-contact-tsx-9090f55fb7416d09a77f.js","sourcesContent":["import classNames from 'classnames'\nimport React, { useState, useEffect } from 'react'\n\nimport SelectArrow from '../assets/common/selectArrow.svg'\nimport Button from '../components/common/button'\nimport InputField from '../components/common/input-field'\nimport Layout from '../components/layout'\nimport { formSubmitted } from '../utils/typewritter'\n\nconst Contact: React.FC = () => {\n  const minHeight = {\n    minHeight: 'calc(100vh - 9.25rem)',\n  }\n  const [validForm, setValidForm] = useState<boolean>(false)\n  const [role, setRole] = useState<string>('DEFAULT')\n  const [firstName, setFirstName] = useState<string>()\n  const [lastName, setLastName] = useState<string>()\n  const [email, setEmail] = useState<string>()\n  const [message, setMessage] = useState<string>()\n  const [submitted, setSubmitted] = useState<boolean>(false)\n\n  const roles = [\n    {\n      label: 'Role',\n      value: 'DEFAULT',\n    },\n    {\n      label: 'Project Manager',\n      value: 'PM',\n    },\n    {\n      label: 'Developer',\n      value: 'Engineer',\n    },\n    {\n      label: 'Business Development',\n      value: 'BD',\n    },\n    {\n      label: 'Sales',\n      value: 'Sales',\n    },\n    {\n      label: 'Operations',\n      value: 'Operations',\n    },\n    {\n      label: 'Executive',\n      value: 'Executive',\n    },\n    {\n      label: 'Marketing',\n      value: 'Marketing',\n    },\n  ]\n\n  const emailRegex = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n  const isValidEmail = (val: string | undefined): boolean => {\n    return !!(val && emailRegex.test(val))\n  }\n\n  useEffect(() => {\n    if (\n      role &&\n      role !== 'DEFAULT' &&\n      firstName &&\n      firstName.length > 0 &&\n      email &&\n      isValidEmail(email) &&\n      message &&\n      message.length > 0\n    ) {\n      setValidForm(true)\n    } else {\n      setValidForm(false)\n    }\n  }, [role, firstName, email, message])\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault()\n    if (!validForm || !email) return\n\n    const formData = {\n      role,\n      first_name: firstName,\n      last_name: lastName !== '' ? lastName : undefined,\n      email,\n      message,\n    }\n\n    if (typeof window !== 'undefined') {\n      if (typeof window.heap !== 'undefined') {\n        window.heap.track('contact', formData)\n      }\n      if (typeof window.analytics !== 'undefined') {\n        formSubmitted({ ...formData, form_name: 'contact ' })\n        window.analytics.identify({\n          role: formData.role,\n          first_name: formData.first_name,\n          last_name: formData.last_name,\n          email: formData.email,\n        })\n      }\n    }\n\n    setSubmitted(true)\n    if (typeof window !== 'undefined') window.scrollTo(0, 0)\n  }\n\n  return (\n    <Layout\n      path=\"contact\"\n      title=\"Contact the PayID Team\"\n      description=\"Have a question about PayID? Contact us and we will help you find the information you are looking for.\"\n    >\n      <div\n        className=\"text-white bg-blue-dark-900 faq-bg xl:bg-cover\"\n        style={minHeight}\n      >\n        <div className=\"flex justify-center px-6 lg:px-18\">\n          <div className=\"container lg:px-17 lg:mt-0 mt-18\">\n            <div className=\"max-w-4xl pt-16 lg:pt-70\">\n              <h1 className=\"text-3xl font-bold sm:text-h1 sm:leading-tighter\">\n                Start building the future of open payments\n              </h1>\n            </div>\n\n            {!submitted && (\n              <div className=\"w-full mx-auto mt-20 md:mt-40 md:max-w-md\">\n                <h2 className=\"mb-10 text-2xl font-bold sm:text-4xl sm:mb-14\">\n                  Have questions? Our team is here to help you get started.\n                </h2>\n\n                <form\n                  onSubmit={handleSubmit}\n                  className=\"mt-16 mb-20 md:mt-30 md:mb-40\"\n                >\n                  <div\n                    className={classNames(\n                      'relative px-6 mb-6 border-2 rounded',\n                      {\n                        'border-green-600': role !== 'DEFAULT',\n                        'border-white': role === 'DEFAULT',\n                      },\n                    )}\n                  >\n                    <select\n                      defaultValue=\"DEFAULT\"\n                      id=\"role\"\n                      name=\"role\"\n                      onChange={(event) => setRole(event.target.value)}\n                      className=\"w-full py-4 bg-transparent appearance-none focus:outline-none\"\n                    >\n                      {roles.map((r) => (\n                        <option\n                          className=\"text-blue-dark-900\"\n                          value={r.value}\n                          key={r.label}\n                          hidden={r.value === 'DEFAULT'}\n                        >\n                          {r.label}\n                        </option>\n                      ))}\n                    </select>\n                    <SelectArrow className=\"absolute h-2 mt-2 text-white right-4 top-4\" />\n                    <label\n                      htmlFor=\"role\"\n                      className={classNames(\n                        'absolute z-10 transition-all duration-300 ease-linear pointer-events-none left-4 bg-blue-dark-900 px-2',\n                        {\n                          '-top-3 text-green-600': role !== 'DEFAULT',\n                          'top-4 text-white': role === 'DEFAULT',\n                        },\n                      )}\n                    >\n                      Role\n                    </label>\n                  </div>\n\n                  <div className=\"flex\">\n                    <InputField\n                      id=\"firstName\"\n                      label=\"First Name\"\n                      type=\"text\"\n                      name=\"first-name\"\n                      autoComplete=\"given-name\"\n                      className=\"mr-3\"\n                      required\n                      requiredText=\"First name is required\"\n                      onChange={(e): void =>\n                        setFirstName(e.currentTarget.value)\n                      }\n                    />\n                    <InputField\n                      id=\"lastName\"\n                      label=\"Last Name\"\n                      type=\"text\"\n                      name=\"last-name\"\n                      autoComplete=\"family-name\"\n                      className=\"ml-3\"\n                      onChange={(e): void => setLastName(e.currentTarget.value)}\n                    />\n                  </div>\n\n                  <InputField\n                    id=\"email\"\n                    label=\"Email\"\n                    type=\"email\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    required\n                    requiredText=\"Email address is required\"\n                    validate={isValidEmail}\n                    invalidText=\"Invalid email address\"\n                    onChange={(e): void => {\n                      if (isValidEmail(e.currentTarget.value)) {\n                        setEmail(e.currentTarget.value)\n                      } else {\n                        setEmail(undefined)\n                      }\n                    }}\n                  />\n\n                  <InputField\n                    id=\"message\"\n                    label=\"Message\"\n                    type=\"text\"\n                    name=\"message\"\n                    required\n                    requiredText=\"Message is required\"\n                    onChange={(e): void => setMessage(e.currentTarget.value)}\n                  />\n\n                  <Button\n                    disabled={!validForm}\n                    label=\"Submit\"\n                    className=\"mt-8 sm:hidden\"\n                  />\n                  <Button\n                    disabled={!validForm}\n                    label=\"Submit\"\n                    size=\"lg\"\n                    className=\"hidden mx-auto mt-16 sm:block\"\n                  />\n                </form>\n              </div>\n            )}\n            {submitted && (\n              <div className=\"w-full mx-auto my-20 text-center md:my-40 md:max-w-lg\">\n                <h2 className=\"text-2xl font-bold sm:text-4xl\">Thank you!</h2>\n                <h3 className=\"mt-4 text-2xl font-bold\">\n                  We will reach out shortly\n                </h3>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Contact\n"],"sourceRoot":""}